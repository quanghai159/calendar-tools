# -*- coding: utf-8 -*-
"""
AUTOMATIC NOTIFICATION RUNNER
============================

M√¥ t·∫£: Ch·∫°y t·ª± ƒë·ªông x·ª≠ l√Ω notifications ƒë·ªãnh k·ª≥
C√°ch ho·∫°t ƒë·ªông:
1. Ch·∫°y li√™n t·ª•c v√† ki·ªÉm tra notifications m·ªói ph√∫t
2. G·ª≠i th√¥ng b√°o khi t·ªõi th·ªùi gian
3. Log k·∫øt qu·∫£ v√† l·ªói
4. Ch·∫°y song song v·ªõi web app

Thu·∫≠t to√°n ch√≠nh:
- Continuous monitoring
- Scheduled execution
- Error handling
- Logging

H∆∞·ªõng d·∫´n s·ª≠ d·ª•ng:
1. Ch·∫°y: python3 auto_notification_runner.py
2. ƒê·ªÉ ch·∫°y song song v·ªõi web app
3. T·ª± ƒë·ªông g·ª≠i th√¥ng b√°o khi t·ªõi gi·ªù

V√≠ d·ª•:
    python3 auto_notification_runner.py
    # Ch·∫°y song song v·ªõi: python3 frontend/app.py
"""

import os
import sys
import time
from datetime import datetime, timedelta

# Add backend directory to path
sys.path.append('backend')

from core.database_manager import DatabaseManager
from notifications.telegram_notifier import TelegramNotifier
from notifications.notification_scheduler import NotificationScheduler

class AutoNotificationRunner:
    def __init__(self):
        """Kh·ªüi t·∫°o Auto Notification Runner"""
        self.running = False
        self.check_interval = 60  # Ki·ªÉm tra m·ªói 60 gi√¢y
        
        # Initialize database
        self.db = DatabaseManager("database/calendar_tools.db")
        
        # Initialize Telegram notifier
        bot_token = "8338680403:AAFZPZM2tllQgFNQcVdM2CzZlMRXYsCJxpw"
        self.telegram_notifier = TelegramNotifier(bot_token)
        
        # Initialize notification scheduler
        self.scheduler = NotificationScheduler(self.db, self.telegram_notifier)
        
        print("‚úÖ Auto Notification Runner initialized")
        print(f"‚è∞ Check interval: {self.check_interval} seconds")
    
    def start(self):
        """B·∫Øt ƒë·∫ßu ch·∫°y t·ª± ƒë·ªông"""
        self.running = True
        print("üöÄ Starting Auto Notification Runner...")
        print("üì± Press Ctrl+C to stop")
        
        try:
            while self.running:
                try:
                    # Ki·ªÉm tra v√† x·ª≠ l√Ω notifications
                    self._check_and_process_notifications()
                    
                    # Ch·ªù interval
                    time.sleep(self.check_interval)
                    
                except KeyboardInterrupt:
                    print("\n‚èπÔ∏è  Stopping Auto Notification Runner...")
                    self.running = False
                    break
                except Exception as e:
                    print(f"‚ùå Error in main loop: {e}")
                    time.sleep(10)  # Ch·ªù 10 gi√¢y tr∆∞·ªõc khi th·ª≠ l·∫°i
                    
        except Exception as e:
            print(f"‚ùå Fatal error: {e}")
        finally:
            print("‚úÖ Auto Notification Runner stopped")
    
    def _check_and_process_notifications(self):
        """Ki·ªÉm tra v√† x·ª≠ l√Ω notifications"""
        try:
            current_time = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
            print(f"üîç Checking notifications at {current_time}")
            
            # X·ª≠ l√Ω notifications
            result = self.scheduler.process_pending_notifications()
            
            if result['status'] == 'success':
                if result['processed'] > 0:
                    print(f"‚úÖ Processed {result['processed']} notifications, {result['sent']} sent successfully")
                else:
                    print("‚ÑπÔ∏è  No notifications to process")
            else:
                print(f"‚ö†Ô∏è  Notification processing result: {result}")
                
        except Exception as e:
            print(f"‚ùå Error checking notifications: {e}")
    
    def stop(self):
        """D·ª´ng runner"""
        self.running = False

def main():
    """Main function"""
    try:
        runner = AutoNotificationRunner()
        runner.start()
    except Exception as e:
        print(f"‚ùå Failed to start Auto Notification Runner: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    main()