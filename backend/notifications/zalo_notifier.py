# -*- coding: utf-8 -*-
"""
ZALO NOTIFIER MODULE
====================

M√¥ t·∫£: G·ª≠i th√¥ng b√°o qua Zalo Official Account
C√°ch ho·∫°t ƒë·ªông:
1. K·∫øt n·ªëi Zalo Official Account API
2. G·ª≠i tin nh·∫Øn text, h√¨nh ·∫£nh, file
3. H·ªó tr·ª£ template message
4. X·ª≠ l√Ω l·ªói v√† retry

Thu·∫≠t to√°n ch√≠nh:
- S·ª≠ d·ª•ng Zalo Official Account API
- OAuth2 authentication
- Template message support
- Retry mechanism
- Rate limiting

H∆∞·ªõng d·∫´n s·ª≠ d·ª•ng:
1. C·∫•u h√¨nh Zalo OA credentials
2. G·ªçi send_message() ƒë·ªÉ g·ª≠i tin nh·∫Øn
3. G·ªçi send_template_message() ƒë·ªÉ g·ª≠i template
4. G·ªçi send_media_message() ƒë·ªÉ g·ª≠i media

V√≠ d·ª•:
    notifier = ZaloNotifier(access_token, oa_id)
    notifier.send_message("user_id", "Hello World!")
"""

import requests
import json
import time
from typing import Dict, Any, Optional, List
from datetime import datetime

class ZaloNotifier:
    def __init__(self, access_token: str, oa_id: str):
        """
        Kh·ªüi t·∫°o ZaloNotifier
        
        Args:
            access_token: Zalo OA Access Token
            oa_id: Zalo OA ID
        """
        self.access_token = access_token
        self.oa_id = oa_id
        self.api_url = "https://openapi.zalo.me/v2.0/oa"
        self.rate_limit_delay = 2  # Delay gi·ªØa c√°c request (seconds)
        self.max_retries = 3
        
        # Test connection
        if not self._test_connection():
            print("‚ö†Ô∏è  Zalo OA connection failed")
    
    def _test_connection(self) -> bool:
        """
        Test k·∫øt n·ªëi v·ªõi Zalo OA API
        
        Returns:
            True n·∫øu k·∫øt n·ªëi th√†nh c√¥ng
        """
        try:
            # Mock test - trong th·ª±c t·∫ø s·∫Ω g·ªçi Zalo API
            if self.access_token and self.oa_id:
                print("‚úÖ Zalo OA credentials configured")
                return True
            return False
        except Exception as e:
            print(f"‚ùå Zalo connection error: {e}")
            return False
    
    def send_message(self, user_id: str, message: str) -> bool:
        """
        Thu·∫≠t to√°n g·ª≠i tin nh·∫Øn text:
        1. Validate user_id v√† message
        2. Format message theo template
        3. G·ª≠i request ƒë·∫øn Zalo API
        4. X·ª≠ l√Ω response v√† retry n·∫øu c·∫ßn
        5. Log k·∫øt qu·∫£
        
        Args:
            user_id: Zalo user ID
            message: N·ªôi dung tin nh·∫Øn
            
        Returns:
            True n·∫øu g·ª≠i th√†nh c√¥ng
        """
        try:
            # B∆∞·ªõc 1: Validate input
            if not user_id or not message:
                print("‚ùå Invalid user_id or message")
                return False
            
            # B∆∞·ªõc 2: Format message
            formatted_message = self._format_message(message)
            
            # B∆∞·ªõc 3: G·ª≠i request
            payload = {
                'recipient': {'user_id': user_id},
                'message': {'text': formatted_message}
            }
            
            # B∆∞·ªõc 4: Retry mechanism
            for attempt in range(self.max_retries):
                try:
                    response = requests.post(
                        f"{self.api_url}/message",
                        headers={
                            'access_token': self.access_token,
                            'Content-Type': 'application/json'
                        },
                        json=payload,
                        timeout=30
                    )
                    
                    if response.status_code == 200:
                        result = response.json()
                        if result.get('error') == 0:
                            print(f"‚úÖ Zalo message sent to {user_id}")
                            return True
                        else:
                            print(f"‚ùå Zalo API error: {result.get('message')}")
                    else:
                        print(f"‚ùå HTTP error: {response.status_code}")
                    
                except requests.exceptions.RequestException as e:
                    print(f"‚ùå Request error (attempt {attempt + 1}): {e}")
                
                # Delay tr∆∞·ªõc khi retry
                if attempt < self.max_retries - 1:
                    time.sleep(self.rate_limit_delay * (attempt + 1))
            
            return False
            
        except Exception as e:
            print(f"‚ùå Send message error: {e}")
            return False
    
    def send_template_message(self, user_id: str, template_name: str, data: Dict[str, Any]) -> bool:
        """
        G·ª≠i template message
        
        Args:
            user_id: Zalo user ID
            template_name: T√™n template
            data: Data ƒë·ªÉ fill v√†o template
            
        Returns:
            True n·∫øu g·ª≠i th√†nh c√¥ng
        """
        try:
            message = self._render_template(template_name, data)
            return self.send_message(user_id, message)
        except Exception as e:
            print(f"‚ùå Template message error: {e}")
            return False
    
    def send_media_message(self, user_id: str, media_url: str, caption: str = "") -> bool:
        """
        G·ª≠i tin nh·∫Øn media (h√¨nh ·∫£nh, file)
        
        Args:
            user_id: Zalo user ID
            media_url: URL c·ªßa media
            caption: Caption cho media
            
        Returns:
            True n·∫øu g·ª≠i th√†nh c√¥ng
        """
        try:
            payload = {
                'recipient': {'user_id': user_id},
                'message': {
                    'attachment': {
                        'type': 'template',
                        'payload': {
                            'template_type': 'media',
                            'elements': [{
                                'media_type': 'image',
                                'url': media_url,
                                'caption': caption
                            }]
                        }
                    }
                }
            }
            
            response = requests.post(
                f"{self.api_url}/message",
                headers={
                    'access_token': self.access_token,
                    'Content-Type': 'application/json'
                },
                json=payload,
                timeout=30
            )
            
            if response.status_code == 200:
                result = response.json()
                if result.get('error') == 0:
                    print(f"‚úÖ Zalo media sent to {user_id}")
                    return True
            
            return False
            
        except Exception as e:
            print(f"‚ùå Media message error: {e}")
            return False
    
    def _format_message(self, message: str) -> str:
        """
        Format message v·ªõi header v√† footer
        
        Args:
            message: Message g·ªëc
            
        Returns:
            Formatted message
        """
        header = "üìÖ CALENDAR TOOLS\n"
        footer = f"\n\nG·ª≠i l√∫c: {datetime.now().strftime('%d/%m/%Y %H:%M')}"
        
        return header + message + footer
    
    def _render_template(self, template_name: str, data: Dict[str, Any]) -> str:
        """
        Render template message
        
        Args:
            template_name: T√™n template
            data: Data ƒë·ªÉ fill
            
        Returns:
            Rendered message
        """
        templates = {
            'reminder': """
üîî NH·∫ÆC NH·ªû L·ªäCH L√ÄM VI·ªÜC

üìÖ {title}
‚è∞ H·∫°n ch√≥t: {deadline}
üìù M√¥ t·∫£: {description}

H√£y chu·∫©n b·ªã s·∫µn s√†ng nh√©! üí™
            """,
            'daily_report': """
üìä B√ÅO C√ÅO H√ÄNG NG√ÄY

‚úÖ Ho√†n th√†nh: {completed}
‚è≥ ƒêang l√†m: {pending}
‚ùå Qu√° h·∫°n: {overdue}

Ch√∫c b·∫°n m·ªôt ng√†y l√†m vi·ªác hi·ªáu qu·∫£! üöÄ
            """,
            'deadline_alert': """
‚ö†Ô∏è C·∫¢NH B√ÅO DEADLINE

üìÖ {title}
‚è∞ C√≤n l·∫°i: {time_left}
üö® M·ª©c ƒë·ªô: {priority}

H√£y t·∫≠p trung ho√†n th√†nh ngay! üî•
            """
        }
        
        template = templates.get(template_name, "{message}")
        return template.format(**data)
    
    def get_user_info(self, user_id: str) -> Optional[Dict[str, Any]]:
        """
        L·∫•y th√¥ng tin user
        
        Args:
            user_id: Zalo user ID
            
        Returns:
            User info dict ho·∫∑c None
        """
        try:
            response = requests.get(
                f"{self.api_url}/getprofile",
                params={
                    'access_token': self.access_token,
                    'data': json.dumps({'user_id': user_id})
                },
                timeout=10
            )
            
            if response.status_code == 200:
                result = response.json()
                if result.get('error') == 0:
                    return result.get('data')
            
            return None
            
        except Exception as e:
            print(f"‚ùå Get user info error: {e}")
            return None

# Test function
def test_zalo_notifier():
    """Test function ƒë·ªÉ ki·ªÉm tra ZaloNotifier ho·∫°t ƒë·ªông ƒë√∫ng"""
    try:
        # Mock credentials
        notifier = ZaloNotifier("mock_access_token", "mock_oa_id")
        
        # Test send message (s·∫Ω fail v√¨ credentials kh√¥ng th·∫≠t)
        success = notifier.send_message("test_user", "Test message")
        print(f"‚úÖ send_message() works: {success}")
        
        # Test template message
        template_data = {
            'title': 'Test Task',
            'deadline': '2024-01-15 17:00',
            'description': 'Test description'
        }
        success = notifier.send_template_message("test_user", "reminder", template_data)
        print(f"‚úÖ send_template_message() works: {success}")
        
        print("üéâ ZaloNotifier test passed!")
        
    except Exception as e:
        print(f"‚ùå ZaloNotifier test failed: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    test_zalo_notifier()