# -*- coding: utf-8 -*-
"""
EMAIL NOTIFIER MODULE
=====================

M√¥ t·∫£: G·ª≠i th√¥ng b√°o qua Email
C√°ch ho·∫°t ƒë·ªông:
1. K·∫øt n·ªëi SMTP server
2. G·ª≠i email HTML/text
3. H·ªó tr·ª£ attachment
4. X·ª≠ l√Ω l·ªói v√† retry

Thu·∫≠t to√°n ch√≠nh:
- S·ª≠ d·ª•ng SMTP protocol
- HTML email templates
- Attachment support
- Retry mechanism
- Rate limiting

H∆∞·ªõng d·∫´n s·ª≠ d·ª•ng:
1. C·∫•u h√¨nh SMTP settings trong config
2. G·ªçi send_email() ƒë·ªÉ g·ª≠i email
3. G·ªçi send_template_email() ƒë·ªÉ g·ª≠i template
4. G·ªçi send_attachment_email() ƒë·ªÉ g·ª≠i file

V√≠ d·ª•:
    notifier = EmailNotifier(smtp_config)
    notifier.send_email("user@example.com", "Subject", "Body")
"""

import smtplib
import ssl
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart
from email.mime.base import MIMEBase
from email import encoders
from typing import Dict, Any, Optional, List
from datetime import datetime
import time

class EmailNotifier:
    def __init__(self, smtp_config: Dict[str, Any]):
        """
        Kh·ªüi t·∫°o EmailNotifier
        
        Args:
            smtp_config: Dict ch·ª©a SMTP configuration
        """
        self.smtp_server = smtp_config.get('smtp_server', 'smtp.gmail.com')
        self.smtp_port = smtp_config.get('smtp_port', 587)
        self.username = smtp_config.get('username', '')
        self.password = smtp_config.get('password', '')
        self.from_email = smtp_config.get('from_email', self.username)
        self.from_name = smtp_config.get('from_name', 'Calendar Tools')
        
        self.max_retries = 3
        self.rate_limit_delay = 2  # Delay gi·ªØa c√°c email (seconds)
    
    def send_email(self, to_email: str, subject: str, body: str, is_html: bool = True) -> bool:
        """
        Thu·∫≠t to√°n g·ª≠i email:
        1. Validate email addresses
        2. T·∫°o MIME message
        3. K·∫øt n·ªëi SMTP server
        4. G·ª≠i email v·ªõi retry
        5. Log k·∫øt qu·∫£
        
        Args:
            to_email: Email ng∆∞·ªùi nh·∫≠n
            subject: Ti√™u ƒë·ªÅ email
            body: N·ªôi dung email
            is_html: True n·∫øu body l√† HTML
            
        Returns:
            True n·∫øu g·ª≠i th√†nh c√¥ng
        """
        try:
            # B∆∞·ªõc 1: Validate input
            if not to_email or not subject or not body:
                print("‚ùå Invalid email parameters")
                return False
            
            # B∆∞·ªõc 2: T·∫°o MIME message
            message = MIMEMultipart('alternative')
            message['From'] = f"{self.from_name} <{self.from_email}>"
            message['To'] = to_email
            message['Subject'] = subject
            
            # B∆∞·ªõc 3: Add body
            if is_html:
                html_body = MIMEText(body, 'html', 'utf-8')
                message.attach(html_body)
            else:
                text_body = MIMEText(body, 'plain', 'utf-8')
                message.attach(text_body)
            
            # B∆∞·ªõc 4: G·ª≠i email v·ªõi retry
            for attempt in range(self.max_retries):
                try:
                    # K·∫øt n·ªëi SMTP
                    context = ssl.create_default_context()
                    with smtplib.SMTP(self.smtp_server, self.smtp_port) as server:
                        server.starttls(context=context)
                        server.login(self.username, self.password)
                        
                        # G·ª≠i email
                        text = message.as_string()
                        server.sendmail(self.from_email, to_email, text)
                        
                        print(f"‚úÖ Email sent to {to_email}")
                        return True
                        
                except Exception as e:
                    print(f"‚ùå Email send error (attempt {attempt + 1}): {e}")
                    if attempt < self.max_retries - 1:
                        time.sleep(self.rate_limit_delay * (attempt + 1))
            
            return False
            
        except Exception as e:
            print(f"‚ùå Email error: {e}")
            return False
    
    def send_template_email(self, to_email: str, template_name: str, data: Dict[str, Any]) -> bool:
        """
        G·ª≠i email theo template
        
        Args:
            to_email: Email ng∆∞·ªùi nh·∫≠n
            template_name: T√™n template
            data: Data ƒë·ªÉ fill v√†o template
            
        Returns:
            True n·∫øu g·ª≠i th√†nh c√¥ng
        """
        try:
            subject, body = self._render_template(template_name, data)
            return self.send_email(to_email, subject, body)
        except Exception as e:
            print(f"‚ùå Template email error: {e}")
            return False
    
    def send_attachment_email(self, to_email: str, subject: str, body: str, 
                            attachment_path: str, attachment_name: str = None) -> bool:
        """
        G·ª≠i email c√≥ attachment
        
        Args:
            to_email: Email ng∆∞·ªùi nh·∫≠n
            subject: Ti√™u ƒë·ªÅ email
            body: N·ªôi dung email
            attachment_path: ƒê∆∞·ªùng d·∫´n file attachment
            attachment_name: T√™n file attachment
            
        Returns:
            True n·∫øu g·ª≠i th√†nh c√¥ng
        """
        try:
            # T·∫°o MIME message
            message = MIMEMultipart()
            message['From'] = f"{self.from_name} <{self.from_email}>"
            message['To'] = to_email
            message['Subject'] = subject
            
            # Add body
            message.attach(MIMEText(body, 'html', 'utf-8'))
            
            # Add attachment
            with open(attachment_path, "rb") as attachment:
                part = MIMEBase('application', 'octet-stream')
                part.set_payload(attachment.read())
            
            encoders.encode_base64(part)
            part.add_header(
                'Content-Disposition',
                f'attachment; filename= {attachment_name or "attachment"}'
            )
            message.attach(part)
            
            # G·ª≠i email
            context = ssl.create_default_context()
            with smtplib.SMTP(self.smtp_server, self.smtp_port) as server:
                server.starttls(context=context)
                server.login(self.username, self.password)
                text = message.as_string()
                server.sendmail(self.from_email, to_email, text)
            
            print(f"‚úÖ Email with attachment sent to {to_email}")
            return True
            
        except Exception as e:
            print(f"‚ùå Attachment email error: {e}")
            return False
    
    def _render_template(self, template_name: str, data: Dict[str, Any]) -> tuple:
        """
        Render email template
        
        Args:
            template_name: T√™n template
            data: Data ƒë·ªÉ fill
            
        Returns:
            Tuple (subject, body)
        """
        templates = {
            'reminder': {
                'subject': 'üîî Nh·∫Øc nh·ªü l·ªãch l√†m vi·ªác - {title}',
                'body': """
                <html>
                <body style="font-family: Arial, sans-serif;">
                    <h2 style="color: #2c3e50;">üìÖ CALENDAR TOOLS</h2>
                    <h3>üîî NH·∫ÆC NH·ªû L·ªäCH L√ÄM VI·ªÜC</h3>
                    
                    <div style="background-color: #f8f9fa; padding: 15px; border-radius: 5px;">
                        <h4 style="color: #2c3e50;">{title}</h4>
                        <p><strong>‚è∞ H·∫°n ch√≥t:</strong> {deadline}</p>
                        <p><strong>üìù M√¥ t·∫£:</strong> {description}</p>
                    </div>
                    
                    <p>H√£y chu·∫©n b·ªã s·∫µn s√†ng nh√©! üí™</p>
                    
                    <hr>
                    <p style="color: #7f8c8d; font-size: 12px;">
                        G·ª≠i l√∫c: {timestamp}
                    </p>
                </body>
                </html>
                """
            },
            'daily_report': {
                'subject': 'üìä B√°o c√°o h√†ng ng√†y - {date}',
                'body': """
                <html>
                <body style="font-family: Arial, sans-serif;">
                    <h2 style="color: #2c3e50;">üìÖ CALENDAR TOOLS</h2>
                    <h3>üìä B√ÅO C√ÅO H√ÄNG NG√ÄY</h3>
                    
                    <div style="background-color: #f8f9fa; padding: 15px; border-radius: 5px;">
                        <p><strong>‚úÖ Ho√†n th√†nh:</strong> {completed}</p>
                        <p><strong>‚è≥ ƒêang l√†m:</strong> {pending}</p>
                        <p><strong>‚ùå Qu√° h·∫°n:</strong> {overdue}</p>
                    </div>
                    
                    <p>Ch√∫c b·∫°n m·ªôt ng√†y l√†m vi·ªác hi·ªáu qu·∫£! üöÄ</p>
                    
                    <hr>
                    <p style="color: #7f8c8d; font-size: 12px;">
                        G·ª≠i l√∫c: {timestamp}
                    </p>
                </body>
                </html>
                """
            }
        }
        
        template = templates.get(template_name, {
            'subject': 'Calendar Tools Notification',
            'body': '{message}'
        })
        
        # Add timestamp
        data['timestamp'] = datetime.now().strftime('%d/%m/%Y %H:%M')
        
        subject = template['subject'].format(**data)
        body = template['body'].format(**data)
        
        return subject, body

# Test function
def test_email_notifier():
    """Test function ƒë·ªÉ ki·ªÉm tra EmailNotifier ho·∫°t ƒë·ªông ƒë√∫ng"""
    try:
        # Mock SMTP config
        smtp_config = {
            'smtp_server': 'smtp.gmail.com',
            'smtp_port': 587,
            'username': 'test@gmail.com',
            'password': 'test_password',
            'from_name': 'Calendar Tools Test'
        }
        
        notifier = EmailNotifier(smtp_config)
        
        # Test send email (s·∫Ω fail v√¨ credentials kh√¥ng th·∫≠t)
        success = notifier.send_email("test@example.com", "Test Subject", "Test Body")
        print(f"‚úÖ send_email() works: {success}")
        
        # Test template email
        template_data = {
            'title': 'Test Task',
            'deadline': '2024-01-15 17:00',
            'description': 'Test description'
        }
        success = notifier.send_template_email("test@example.com", "reminder", template_data)
        print(f"‚úÖ send_template_email() works: {success}")
        
        print("üéâ EmailNotifier test passed!")
        
    except Exception as e:
        print(f"‚ùå EmailNotifier test failed: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    test_email_notifier()