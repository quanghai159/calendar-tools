# -*- coding: utf-8 -*-
"""
GOOGLE SHEETS CONNECTOR MODULE
=============================

M√¥ t·∫£: K·∫øt n·ªëi v√† ƒë·ªçc d·ªØ li·ªáu t·ª´ Google Sheets
C√°ch ho·∫°t ƒë·ªông:
1. Authenticate v·ªõi Google Sheets API
2. ƒê·ªçc d·ªØ li·ªáu t·ª´ sheet
3. Parse d·ªØ li·ªáu th√†nh calendar events
4. Validate v√† clean data
5. Tr·∫£ v·ªÅ structured data

Thu·∫≠t to√°n ch√≠nh:
- S·ª≠ d·ª•ng Google Sheets API v4
- OAuth2 authentication
- Parse CSV-like data t·ª´ sheets
- Map columns th√†nh calendar event fields
- Validate date formats v√† required fields

H∆∞·ªõng d·∫´n s·ª≠ d·ª•ng:
1. C·∫•u h√¨nh Google credentials
2. G·ªçi connect() ƒë·ªÉ k·∫øt n·ªëi
3. G·ªçi read_sheet_data() ƒë·ªÉ ƒë·ªçc d·ªØ li·ªáu
4. G·ªçi parse_calendar_events() ƒë·ªÉ parse events

V√≠ d·ª•:
    connector = GoogleSheetsConnector()
    data = connector.read_sheet_data("1BxiMVs0XRA5nFMdKvBdBZjgmUUqptlbs74OgvE2upms")
    events = connector.parse_calendar_events(data)
"""

import os
import sys
import json
import re
from typing import Dict, Any, List, Optional
from datetime import datetime

# Add parent directory to path
current_dir = os.path.dirname(os.path.abspath(__file__))
parent_dir = os.path.dirname(current_dir)
sys.path.append(parent_dir)

from utils.date_utils import DateUtils

class GoogleSheetsConnector:
    def __init__(self, credentials_file: str = "config/google_credentials.json", use_mock: bool = True):
        """
        Kh·ªüi t·∫°o GoogleSheetsConnector
        
        Args:
            credentials_file: ƒê∆∞·ªùng d·∫´n ƒë·∫øn file credentials
            use_mock: S·ª≠ d·ª•ng mock data cho test
        """
        self.credentials_file = credentials_file
        self.use_mock = use_mock
        self.date_utils = DateUtils()
        self.service = None
        
        # C·∫•u h√¨nh mapping columns (c√≥ th·ªÉ customize)
        self.column_mapping = {
            'title': ['title', 'ten', 'ten_cong_viec', 'task', 'work'],
            'description': ['description', 'mo_ta', 'chi_tiet', 'details'],
            'start_date': ['start_date', 'ngay_bat_dau', 'start', 'from_date'],
            'end_date': ['end_date', 'ngay_ket_thuc', 'end', 'to_date'],
            'deadline': ['deadline', 'han_chot', 'due_date', 'han'],
            'category': ['category', 'loai', 'type', 'danh_muc'],
            'priority': ['priority', 'do_uu_tien', 'muc_do', 'level'],
            'status': ['status', 'trang_thai', 'state']
        }
    
    def connect(self) -> bool:
        """
        Thu·∫≠t to√°n k·∫øt n·ªëi Google Sheets API:
        1. Ki·ªÉm tra credentials file t·ªìn t·∫°i
        2. Load credentials
        3. Authenticate v·ªõi Google API
        4. T·∫°o service object
        5. Test connection
        
        Returns:
            True n·∫øu k·∫øt n·ªëi th√†nh c√¥ng
        """
        try:
            # B∆∞·ªõc 1: Ki·ªÉm tra credentials file
            if not os.path.exists(self.credentials_file):
                if self.use_mock:
                    print(f"‚ö†Ô∏è  Credentials file not found: {self.credentials_file}")
                    print("üîÑ Using mock data for testing")
                    self.service = MockGoogleSheetsService()
                    return True
                else:
                    print(f"‚ö†Ô∏è  Credentials file not found: {self.credentials_file}")
                    print("üìù Please create Google credentials file first")
                    return False
            
            # B∆∞·ªõc 2: Load credentials
            with open(self.credentials_file, 'r') as f:
                credentials = json.load(f)
            
            # B∆∞·ªõc 3: Authenticate (simplified - trong th·ª±c t·∫ø c·∫ßn OAuth2)
            print("‚úÖ Google Sheets credentials loaded")
            
            # B∆∞·ªõc 4: T·∫°o mock service (v√¨ ch∆∞a c√≥ real API key)
            self.service = MockGoogleSheetsService()
            
            # B∆∞·ªõc 5: Test connection
            if self._test_connection():
                print("‚úÖ Google Sheets connection successful")
                return True
            else:
                print("‚ùå Google Sheets connection failed")
                return False
                
        except Exception as e:
            print(f"‚ùå Connection error: {e}")
            return False
    
    def _test_connection(self) -> bool:
        """
        Test k·∫øt n·ªëi v·ªõi Google Sheets
        
        Returns:
            True n·∫øu test th√†nh c√¥ng
        """
        try:
            # Mock test - trong th·ª±c t·∫ø s·∫Ω g·ªçi API
            return self.service is not None
        except Exception:
            return False
    
    def read_sheet_data(self, sheet_id: str, range_name: str = "A:Z") -> List[List[str]]:
        """
        Thu·∫≠t to√°n ƒë·ªçc d·ªØ li·ªáu t·ª´ Google Sheet:
        1. Validate sheet_id
        2. G·ªçi Google Sheets API
        3. Parse response th√†nh 2D array
        4. Clean v√† validate data
        5. Return structured data
        
        Args:
            sheet_id: Google Sheet ID
            range_name: Range c·∫ßn ƒë·ªçc (m·∫∑c ƒë·ªãnh: A:Z)
            
        Returns:
            2D array ch·ª©a d·ªØ li·ªáu sheet
        """
        try:
            if not self.service:
                # N·∫øu ch∆∞a connect, th·ª≠ connect v·ªõi mock data
                if self.use_mock:
                    print("üîÑ Auto-connecting with mock data...")
                    self.service = MockGoogleSheetsService()
                else:
                    raise RuntimeError("Not connected to Google Sheets. Call connect() first.")
            
            # B∆∞·ªõc 1: Validate sheet_id
            if not self._validate_sheet_id(sheet_id):
                raise ValueError(f"Invalid sheet ID: {sheet_id}")
            
            # B∆∞·ªõc 2: G·ªçi API ƒë·ªÉ ƒë·ªçc d·ªØ li·ªáu
            print(f"üìñ Reading data from sheet: {sheet_id}")
            data = self.service.get_values(sheet_id, range_name)
            
            # B∆∞·ªõc 3: Clean data
            cleaned_data = self._clean_sheet_data(data)
            
            print(f"‚úÖ Read {len(cleaned_data)} rows from sheet")
            return cleaned_data
            
        except Exception as e:
            print(f"‚ùå Error reading sheet data: {e}")
            return []
    
    def _validate_sheet_id(self, sheet_id: str) -> bool:
        """
        Validate Google Sheet ID
        
        Args:
            sheet_id: Sheet ID c·∫ßn validate
            
        Returns:
            True n·∫øu h·ª£p l·ªá
        """
        if not sheet_id or not isinstance(sheet_id, str):
            return False
        
        # Google Sheet ID th∆∞·ªùng c√≥ 44 k√Ω t·ª±
        if len(sheet_id) < 20 or len(sheet_id) > 50:
            return False
        
        # Ch·ªâ ch·ª©a k√Ω t·ª± h·ª£p l·ªá
        if not re.match(r'^[a-zA-Z0-9_-]+$', sheet_id):
            return False
        
        return True
    
    def _clean_sheet_data(self, raw_data: List[List[str]]) -> List[List[str]]:
        """
        Thu·∫≠t to√°n clean d·ªØ li·ªáu sheet:
        1. Lo·∫°i b·ªè rows r·ªóng
        2. Trim whitespace
        3. Validate data types
        4. Remove invalid rows
        
        Args:
            raw_data: Raw data t·ª´ Google Sheets
            
        Returns:
            Cleaned data
        """
        cleaned = []
        
        for row in raw_data:
            # B∆∞·ªõc 1: Lo·∫°i b·ªè rows ho√†n to√†n r·ªóng
            if not any(cell.strip() for cell in row):
                continue
            
            # B∆∞·ªõc 2: Trim whitespace cho m·ªói cell
            cleaned_row = [cell.strip() for cell in row]
            
            # B∆∞·ªõc 3: Lo·∫°i b·ªè rows c√≥ qu√° √≠t th√¥ng tin
            if len([cell for cell in cleaned_row if cell]) < 2:
                continue
            
            cleaned.append(cleaned_row)
        
        return cleaned
    
    def parse_calendar_events(self, sheet_data: List[List[str]]) -> List[Dict[str, Any]]:
        """
        Thu·∫≠t to√°n parse d·ªØ li·ªáu sheet th√†nh calendar events:
        1. T√¨m header row
        2. Map columns theo column_mapping
        3. Parse t·ª´ng row th√†nh event
        4. Validate required fields
        5. Clean v√† format data
        
        Args:
            sheet_data: 2D array d·ªØ li·ªáu t·ª´ sheet
            
        Returns:
            List c√°c calendar event dicts
        """
        if not sheet_data:
            return []
        
        try:
            # B∆∞·ªõc 1: T√¨m header row
            header_row = self._find_header_row(sheet_data)
            if header_row is None:
                print("‚ö†Ô∏è  No valid header row found")
                return []
            
            # B∆∞·ªõc 2: Map columns
            column_map = self._map_columns(sheet_data[header_row])
            print(f"‚úÖ Mapped columns: {column_map}")
            
            # B∆∞·ªõc 3: Parse data rows
            events = []
            for i, row in enumerate(sheet_data[header_row + 1:], start=header_row + 2):
                try:
                    event = self._parse_row_to_event(row, column_map, i)
                    if event:
                        events.append(event)
                except Exception as e:
                    print(f"‚ö†Ô∏è  Error parsing row {i}: {e}")
                    continue
            
            print(f"‚úÖ Parsed {len(events)} calendar events")
            return events
            
        except Exception as e:
            print(f"‚ùå Error parsing calendar events: {e}")
            return []
    
    def _find_header_row(self, data: List[List[str]]) -> Optional[int]:
        """
        T√¨m header row trong d·ªØ li·ªáu
        
        Args:
            data: 2D array d·ªØ li·ªáu
            
        Returns:
            Index c·ªßa header row ho·∫∑c None
        """
        for i, row in enumerate(data):
            if not row:
                continue
            
            # Ki·ªÉm tra xem row c√≥ ch·ª©a c√°c t·ª´ kh√≥a header kh√¥ng
            row_text = ' '.join(row).lower()
            header_keywords = ['title', 'ten', 'date', 'ngay', 'deadline', 'han']
            
            if any(keyword in row_text for keyword in header_keywords):
                return i
        
        return None
    
    def _map_columns(self, header_row: List[str]) -> Dict[str, int]:
        """
        Map columns theo column_mapping
        
        Args:
            header_row: Header row t·ª´ sheet
            
        Returns:
            Dict mapping field names to column indices
        """
        column_map = {}
        
        for i, cell in enumerate(header_row):
            cell_lower = cell.lower().strip()
            
            # T√¨m mapping cho cell n√†y
            for field, keywords in self.column_mapping.items():
                if any(keyword in cell_lower for keyword in keywords):
                    column_map[field] = i
                    break
        
        return column_map
    
    def _parse_row_to_event(self, row: List[str], column_map: Dict[str, int], row_num: int) -> Optional[Dict[str, Any]]:
        """
        Parse m·ªôt row th√†nh calendar event
        
        Args:
            row: Data row
            column_map: Column mapping
            row_num: Row number (for error reporting)
            
        Returns:
            Event dict ho·∫∑c None
        """
        try:
            # B∆∞·ªõc 1: Extract basic fields
            title = self._get_cell_value(row, column_map, 'title')
            if not title:
                print(f"‚ö†Ô∏è  Row {row_num}: Missing title")
                return None
            
            # B∆∞·ªõc 2: Extract dates
            start_date = self._get_cell_value(row, column_map, 'start_date')
            end_date = self._get_cell_value(row, column_map, 'end_date')
            deadline = self._get_cell_value(row, column_map, 'deadline')
            
            # B∆∞·ªõc 3: Validate dates
            if not start_date:
                print(f"‚ö†Ô∏è  Row {row_num}: Missing start_date")
                return None
            
            # B∆∞·ªõc 4: Parse dates
            try:
                parsed_start = self.date_utils.parse_date(start_date)
                parsed_end = self.date_utils.parse_date(end_date) if end_date else None
                parsed_deadline = self.date_utils.parse_date(deadline) if deadline else None
            except Exception as e:
                print(f"‚ö†Ô∏è  Row {row_num}: Invalid date format - {e}")
                return None
            
            # B∆∞·ªõc 5: Create event
            event = {
                'title': title,
                'description': self._get_cell_value(row, column_map, 'description', ''),
                'start_date': self.date_utils.format_date(parsed_start, '%Y-%m-%d'),
                'end_date': self.date_utils.format_date(parsed_end, '%Y-%m-%d') if parsed_end else None,
                'deadline': self.date_utils.format_date(parsed_deadline, '%Y-%m-%d %H:%M') if parsed_deadline else None,
                'category': self._get_cell_value(row, column_map, 'category', 'work'),
                'priority': self._get_cell_value(row, column_map, 'priority', 'medium'),
                'status': self._get_cell_value(row, column_map, 'status', 'pending'),
                'source': 'google_sheets',
                'row_number': row_num
            }
            
            return event
            
        except Exception as e:
            print(f"‚ùå Error parsing row {row_num}: {e}")
            return None
    
    def _get_cell_value(self, row: List[str], column_map: Dict[str, int], field: str, default: str = None) -> str:
        """
        L·∫•y gi√° tr·ªã cell theo field mapping
        
        Args:
            row: Data row
            column_map: Column mapping
            field: Field name
            default: Default value
            
        Returns:
            Cell value ho·∫∑c default
        """
        if field not in column_map:
            return default
        
        col_index = column_map[field]
        if col_index < len(row):
            return row[col_index]
        
        return default

class MockGoogleSheetsService:
    """
    Mock Google Sheets Service ƒë·ªÉ test m√† kh√¥ng c·∫ßn real API
    """
    
    def __init__(self):
        self.mock_data = {
            "1BxiMVs0XRA5nFMdKvBdBZjgmUUqptlbs74OgvE2upms": [
                ["Title", "Description", "Start Date", "End Date", "Deadline", "Category", "Priority"],
                ["H·ªçp team", "H·ªçp ƒë·ªãnh k·ª≥ team", "2024-01-15", "2024-01-15", "2024-01-15 17:00", "meeting", "high"],
                ["L√†m b√°o c√°o", "Vi·∫øt b√°o c√°o th√°ng", "2024-01-16", "2024-01-20", "2024-01-20 18:00", "work", "medium"],
                ["Ngh·ªâ ph√©p", "Ngh·ªâ ph√©p cu·ªëi tu·∫ßn", "2024-01-25", "2024-01-26", "", "personal", "low"]
            ]
        }
    
    def get_values(self, sheet_id: str, range_name: str) -> List[List[str]]:
        """
        Mock method ƒë·ªÉ tr·∫£ v·ªÅ d·ªØ li·ªáu test
        
        Args:
            sheet_id: Google Sheet ID
            range_name: Range name
            
        Returns:
            Mock data
        """
        if sheet_id in self.mock_data:
            return self.mock_data[sheet_id]
        else:
            return []

# Test function
def test_google_sheets_connector():
    """Test function ƒë·ªÉ ki·ªÉm tra GoogleSheetsConnector ho·∫°t ƒë·ªông ƒë√∫ng"""
    try:
        connector = GoogleSheetsConnector(use_mock=True)
        
        # Test connect
        connected = connector.connect()
        print(f"‚úÖ connect() works: {connected}")
        
        # Test read sheet data
        sheet_id = "1BxiMVs0XRA5nFMdKvBdBZjgmUUqptlbs74OgvE2upms"
        data = connector.read_sheet_data(sheet_id)
        print(f"‚úÖ read_sheet_data() works: {len(data)} rows")
        
        # Test parse calendar events
        events = connector.parse_calendar_events(data)
        print(f"‚úÖ parse_calendar_events() works: {len(events)} events")
        
        # Print sample event
        if events:
            print(f"üìÖ Sample event: {events[0]['title']} - {events[0]['start_date']}")
        
        print("üéâ GoogleSheetsConnector test passed!")
        
    except Exception as e:
        print(f"‚ùå GoogleSheetsConnector test failed: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    test_google_sheets_connector()